{
  "address": "0x7969c5eD335650692Bc04293B07F5BF2e7A673C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnStaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        }
      ],
      "name": "speedStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ac42c116951407a49f73972b1cae3fc94820244a048f904143730f3d637b3f8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7969c5eD335650692Bc04293B07F5BF2e7A673C0",
    "transactionIndex": 0,
    "gasUsed": "2151896",
    "logsBloom": "0x
    "blockHash": "0x702621e4c5eca2bfef466c29a72f3ac715b38b56bf2a0350f4aa5d1b4593a920",
    "transactionHash": "0x0ac42c116951407a49f73972b1cae3fc94820244a048f904143730f3d637b3f8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13093515,
        "transactionHash": "0x0ac42c116951407a49f73972b1cae3fc94820244a048f904143730f3d637b3f8",
        "address": "0x7969c5eD335650692Bc04293B07F5BF2e7A673C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x702621e4c5eca2bfef466c29a72f3ac715b38b56bf2a0350f4aa5d1b4593a920"
      }
    ],
    "blockNumber": 13093515,
    "cumulativeGasUsed": "2151896",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
    "1000000000000000000",
    "0x14Ffbe5b0E18EF6209e5a92a8F7213335651B97e"
  ],
  "solcInputHash": "cfa3980ddc942130cfb3ba8b1f9ff943",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"}],\"name\":\"speedStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract Staking is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    uint256 public accRewardPerShare;\\n    uint256 public rewardPerBlock;\\n    uint256 public lastRewardBlock;\\n    uint256 public totalStaked;\\n    mapping(address => UserInfo) public userInfo;\\n\\n    IERC20 public token;\\n    IERC20 public stakedToken;\\n    IUniswapV2Router02 public router;\\n\\n    event Stake(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event UnStaked(address indexed user, uint256 amount);\\n\\n    constructor(\\n        IERC20 _stakedToken,\\n        uint256 _rewardPerBlock,\\n        IERC20 _token\\n    ) {\\n        stakedToken = _stakedToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        token = IERC20(_token);\\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    }\\n\\n    function stake(uint256 _amount) external {\\n        distributeReward();\\n        stakedToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        _stake(_amount);\\n    }\\n\\n    function claim() external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        distributeReward();\\n        _claim();\\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\\n    }\\n\\n    function unStake(uint256 _amount) external {\\n        UserInfo memory user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Staking::bad action\\\");\\n        distributeReward();\\n        _unStake(_amount);\\n    }\\n\\n    function pendingReward() external view returns (uint256) {\\n        UserInfo memory user = userInfo[msg.sender];\\n        return\\n            (user.amount * (accRewardPerShare +(getReward(lastRewardBlock, block.number) * 1e12) /totalStaked)) /\\n            1e12 -\\n            user.rewardDebt;\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        distributeReward();\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function getReward(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return rewardPerBlock * (_to - _from);\\n    }\\n\\n    function distributeReward() public {\\n        if (block.number < lastRewardBlock) {\\n            return;\\n        }\\n\\n        if (totalStaked == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        accRewardPerShare =\\n            accRewardPerShare +\\n            (getReward(lastRewardBlock, block.number) * 1e12) /\\n            totalStaked;\\n        lastRewardBlock = block.number;\\n    }\\n\\n    function _stake(uint256 _amount) private {\\n        UserInfo storage user = userInfo[msg.sender];\\n        _claim();\\n        user.amount += _amount;\\n        totalStaked += _amount;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\\n        emit Stake(msg.sender, _amount);\\n    }\\n\\n    function _claim() private {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 pending = (user.amount * accRewardPerShare) /\\n            1e12 -\\n            user.rewardDebt;\\n\\n        _safeRewardTransfer(msg.sender, pending);\\n\\n        emit Claim(msg.sender, pending);\\n    }\\n\\n    function _unStake(uint256 _amount) private {\\n        UserInfo storage user = userInfo[msg.sender];\\n        _claim();\\n        user.amount -= _amount;\\n        totalStaked -= _amount;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\\n        stakedToken.safeTransfer(msg.sender, _amount);\\n        emit UnStaked(msg.sender, _amount);\\n    }\\n\\n    function _safeRewardTransfer(address _to, uint256 _amount) private {\\n        uint256 balance = stakedToken.balanceOf(address(this)) - totalStaked;\\n        if (_amount > balance) {\\n            stakedToken.safeTransfer(_to, balance);\\n            return;\\n        }\\n\\n        stakedToken.safeTransfer(_to, _amount);\\n    }\\n\\n    function speedStake(\\n        uint256 _amountOutMin,\\n        uint256 _deadline,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin\\n    ) external payable {\\n        distributeReward();\\n        uint256[] memory amounts;\\n        address[] memory path = new address[](2);\\n        path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n        path[1] = address(token);\\n        amounts = router.swapExactETHForTokens{value: msg.value / 2}(\\n            _amountOutMin,\\n            path,\\n            address(this),\\n            _deadline\\n        );\\n        token.approve(address(router), amounts[1]);\\n\\n        (, , uint256 liquidity) = router.addLiquidityETH{value: msg.value / 2}(\\n            address(token),\\n            amounts[1],\\n            _amountTokenMin,\\n            _amountETHMin,\\n            address(this),\\n            _deadline\\n        );\\n        _stake(liquidity);\\n    }\\n}\\n\",\"keccak256\":\"0xc342814cc7743423ad50c938d9b9a762bec9a846b9d0529d7153ed21331844e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026f9380380620026f9833981810160405281019062000037919062000238565b620000576200004b6200013e60201b60201c565b6200014660201b60201c565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550737a250d5630b4cf539739df2c5dacb4c659f2488d600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200031f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200021b81620002eb565b92915050565b600081519050620002328162000305565b92915050565b600080600060608486031215620002545762000253620002e6565b5b600062000264868287016200020a565b9350506020620002778682870162000221565b92505060406200028a868287016200020a565b9150509250925092565b6000620002a182620002bc565b9050919050565b6000620002b58262000294565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b620002f681620002a8565b81146200030257600080fd5b50565b6200031081620002dc565b81146200031c57600080fd5b50565b6123ca806200032f6000396000f3fe6080604052600436106101145760003560e01c80638f73c5ae116100a0578063bb872b4a11610064578063bb872b4a14610349578063cc7a262e14610372578063f2fde38b1461039d578063f887ea40146103c6578063fc0c546a146103f157610114565b80638f73c5ae14610276578063939d62371461028d578063a694fc3a146102b8578063a9f8d181146102e1578063b90bc5191461030c57610114565b80635d3eea91116100e75780635d3eea91146101b5578063715018a6146101de578063817b1cd2146101f55780638ae39cac146102205780638da5cb5b1461024b57610114565b8063137ee36e146101195780631959a00214610144578063464d9409146101825780634e71d92d1461019e575b600080fd5b34801561012557600080fd5b5061012e61041c565b60405161013b9190611db1565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906117b2565b6104e9565b604051610179929190611e18565b60405180910390f35b61019c60048036038101906101979190611942565b61050d565b005b3480156101aa57600080fd5b506101b3610906565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611855565b610986565b005b3480156101ea57600080fd5b506101f3610a44565b005b34801561020157600080fd5b5061020a610acc565b6040516102179190611db1565b60405180910390f35b34801561022c57600080fd5b50610235610ad2565b6040516102429190611db1565b60405180910390f35b34801561025757600080fd5b50610260610ad8565b60405161026d9190611bbd565b60405180910390f35b34801561028257600080fd5b5061028b610b01565b005b34801561029957600080fd5b506102a2610b6d565b6040516102af9190611db1565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da9190611855565b610b73565b005b3480156102ed57600080fd5b506102f6610bd6565b6040516103039190611db1565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e91906118af565b610bdc565b6040516103409190611db1565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190611855565b610bff565b005b34801561037e57600080fd5b50610387610c8d565b6040516103949190611c99565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf91906117b2565b610cb3565b005b3480156103d257600080fd5b506103db610dab565b6040516103e89190611cb4565b60405180910390f35b3480156103fd57600080fd5b50610406610dd1565b6040516104139190611c99565b60405180910390f35b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806020015164e8d4a5100060045464e8d4a5100061049f60035443610bdc565b6104a99190611f84565b6104b39190611f53565b6001546104c09190611efd565b83600001516104cf9190611f84565b6104d99190611f53565b6104e39190611fde565b91505090565b60056020528060005260406000206000915090508060000154908060010154905082565b610515610b01565b60606000600267ffffffffffffffff81111561053457610533612193565b5b6040519080825280602002602001820160405280156105625781602001602082028036833780820191505090505b50905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160008151811061058e5761058d612164565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106105ff576105fe612164565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab56002346106849190611f53565b8884308a6040518663ffffffff1660e01b81526004016106a79493929190611dcc565b6000604051808303818588803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906106fe91906117df565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460018151811061077557610774612164565b5b60200260200101516040518363ffffffff1660e01b815260040161079a929190611c0f565b602060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611828565b506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71960023461083a9190611f53565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660018151811061087157610870612164565b5b60200260200101518989308d6040518863ffffffff1660e01b815260040161089e96959493929190611c38565b6060604051808303818588803b1580156108b757600080fd5b505af11580156108cb573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108f091906118ef565b925050506108fd81610df7565b50505050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610951610b01565b610959610ef2565b64e8d4a5100060015482600001546109719190611f84565b61097b9190611f53565b816001018190555050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508181600001511015610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690611d31565b60405180910390fd5b610a37610b01565b610a4082610fc6565b5050565b610a4c61110e565b73ffffffffffffffffffffffffffffffffffffffff16610a6a610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790611d51565b60405180910390fd5b610aca6000611116565b565b60045481565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600354431015610b1057610b6b565b60006004541415610b275743600381905550610b6b565b60045464e8d4a51000610b3c60035443610bdc565b610b469190611f84565b610b509190611f53565b600154610b5d9190611efd565b600181905550436003819055505b565b60015481565b610b7b610b01565b610bca333083600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111da909392919063ffffffff16565b610bd381610df7565b50565b60035481565b60008282610bea9190611fde565b600254610bf79190611f84565b905092915050565b610c0761110e565b73ffffffffffffffffffffffffffffffffffffffff16610c25610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290611d51565b60405180910390fd5b610c83610b01565b8060028190555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cbb61110e565b73ffffffffffffffffffffffffffffffffffffffff16610cd9610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690611d51565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611cf1565b60405180910390fd5b610da881611116565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610e42610ef2565b81816000016000828254610e569190611efd565b925050819055508160046000828254610e6f9190611efd565b9250508190555064e8d4a510006001548260000154610e8e9190611f84565b610e989190611f53565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610ee69190611db1565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015464e8d4a510006001548460000154610f549190611f84565b610f5e9190611f53565b610f689190611fde565b9050610f743382611263565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610fba9190611db1565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611011610ef2565b818160000160008282546110259190611fde565b92505081905550816004600082825461103e9190611fde565b9250508190555064e8d4a51000600154826000015461105d9190611f84565b6110679190611f53565b81600101819055506110bc3383600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f79d3df6837cc49ff0e09fd3258e6e45594e0703445bb06825e9d75156eaee8f0836040516111029190611db1565b60405180910390a25050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61125d846323b872dd60e01b8585856040516024016111fb93929190611bd8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611453565b50505050565b6000600454600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112c39190611bbd565b60206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611882565b61131d9190611fde565b90508082111561137a576113748382600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b506113c9565b6113c78383600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b505b5050565b61144e8363a9059cbb60e01b84846040516024016113ec929190611c0f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611453565b505050565b60006114b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661151a9092919063ffffffff16565b905060008151111561151557808060200190518101906114d59190611828565b611514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150b90611d91565b60405180910390fd5b5b505050565b60606115298484600085611532565b90509392505050565b606082471015611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e90611d11565b60405180910390fd5b61158085611646565b6115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690611d71565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115e89190611ba6565b60006040518083038185875af1925050503d8060008114611625576040519150601f19603f3d011682016040523d82523d6000602084013e61162a565b606091505b509150915061163a828286611659565b92505050949350505050565b600080823b905060008111915050919050565b60608315611669578290506116b9565b60008351111561167c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b09190611ccf565b60405180910390fd5b9392505050565b60006116d36116ce84611e66565b611e41565b905080838252602082019050828560208602820111156116f6576116f56121c7565b5b60005b85811015611726578161170c888261179d565b8452602084019350602083019250506001810190506116f9565b5050509392505050565b60008135905061173f8161234f565b92915050565b600082601f83011261175a576117596121c2565b5b815161176a8482602086016116c0565b91505092915050565b60008151905061178281612366565b92915050565b6000813590506117978161237d565b92915050565b6000815190506117ac8161237d565b92915050565b6000602082840312156117c8576117c76121d1565b5b60006117d684828501611730565b91505092915050565b6000602082840312156117f5576117f46121d1565b5b600082015167ffffffffffffffff811115611813576118126121cc565b5b61181f84828501611745565b91505092915050565b60006020828403121561183e5761183d6121d1565b5b600061184c84828501611773565b91505092915050565b60006020828403121561186b5761186a6121d1565b5b600061187984828501611788565b91505092915050565b600060208284031215611898576118976121d1565b5b60006118a68482850161179d565b91505092915050565b600080604083850312156118c6576118c56121d1565b5b60006118d485828601611788565b92505060206118e585828601611788565b9150509250929050565b600080600060608486031215611908576119076121d1565b5b60006119168682870161179d565b93505060206119278682870161179d565b92505060406119388682870161179d565b9150509250925092565b6000806000806080858703121561195c5761195b6121d1565b5b600061196a87828801611788565b945050602061197b87828801611788565b935050604061198c87828801611788565b925050606061199d87828801611788565b91505092959194509250565b60006119b583836119c1565b60208301905092915050565b6119ca81612012565b82525050565b6119d981612012565b82525050565b60006119ea82611ea2565b6119f48185611ed0565b93506119ff83611e92565b8060005b83811015611a30578151611a1788826119a9565b9750611a2283611ec3565b925050600181019050611a03565b5085935050505092915050565b6000611a4882611ead565b611a528185611ee1565b9350611a628185602086016120a2565b80840191505092915050565b611a778161205a565b82525050565b611a868161207e565b82525050565b6000611a9782611eb8565b611aa18185611eec565b9350611ab18185602086016120a2565b611aba816121d6565b840191505092915050565b6000611ad2602683611eec565b9150611add826121e7565b604082019050919050565b6000611af5602683611eec565b9150611b0082612236565b604082019050919050565b6000611b18601383611eec565b9150611b2382612285565b602082019050919050565b6000611b3b602083611eec565b9150611b46826122ae565b602082019050919050565b6000611b5e601d83611eec565b9150611b69826122d7565b602082019050919050565b6000611b81602a83611eec565b9150611b8c82612300565b604082019050919050565b611ba081612050565b82525050565b6000611bb28284611a3d565b915081905092915050565b6000602082019050611bd260008301846119d0565b92915050565b6000606082019050611bed60008301866119d0565b611bfa60208301856119d0565b611c076040830184611b97565b949350505050565b6000604082019050611c2460008301856119d0565b611c316020830184611b97565b9392505050565b600060c082019050611c4d60008301896119d0565b611c5a6020830188611b97565b611c676040830187611b97565b611c746060830186611b97565b611c8160808301856119d0565b611c8e60a0830184611b97565b979650505050505050565b6000602082019050611cae6000830184611a6e565b92915050565b6000602082019050611cc96000830184611a7d565b92915050565b60006020820190508181036000830152611ce98184611a8c565b905092915050565b60006020820190508181036000830152611d0a81611ac5565b9050919050565b60006020820190508181036000830152611d2a81611ae8565b9050919050565b60006020820190508181036000830152611d4a81611b0b565b9050919050565b60006020820190508181036000830152611d6a81611b2e565b9050919050565b60006020820190508181036000830152611d8a81611b51565b9050919050565b60006020820190508181036000830152611daa81611b74565b9050919050565b6000602082019050611dc66000830184611b97565b92915050565b6000608082019050611de16000830187611b97565b8181036020830152611df381866119df565b9050611e0260408301856119d0565b611e0f6060830184611b97565b95945050505050565b6000604082019050611e2d6000830185611b97565b611e3a6020830184611b97565b9392505050565b6000611e4b611e5c565b9050611e5782826120d5565b919050565b6000604051905090565b600067ffffffffffffffff821115611e8157611e80612193565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611f0882612050565b9150611f1383612050565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f4857611f47612106565b5b828201905092915050565b6000611f5e82612050565b9150611f6983612050565b925082611f7957611f78612135565b5b828204905092915050565b6000611f8f82612050565b9150611f9a83612050565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fd357611fd2612106565b5b828202905092915050565b6000611fe982612050565b9150611ff483612050565b92508282101561200757612006612106565b5b828203905092915050565b600061201d82612030565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120658261206c565b9050919050565b600061207782612030565b9050919050565b600061208982612090565b9050919050565b600061209b82612030565b9050919050565b60005b838110156120c05780820151818401526020810190506120a5565b838111156120cf576000848401525b50505050565b6120de826121d6565b810181811067ffffffffffffffff821117156120fd576120fc612193565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a3a62616420616374696f6e00000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61235881612012565b811461236357600080fd5b50565b61236f81612024565b811461237a57600080fd5b50565b61238681612050565b811461239157600080fd5b5056fea2646970667358221220ca91d6e40a75de8d64b2c89cf1f4352005ca9b824d28bcc85020fd7b66ffb4c764736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80638f73c5ae116100a0578063bb872b4a11610064578063bb872b4a14610349578063cc7a262e14610372578063f2fde38b1461039d578063f887ea40146103c6578063fc0c546a146103f157610114565b80638f73c5ae14610276578063939d62371461028d578063a694fc3a146102b8578063a9f8d181146102e1578063b90bc5191461030c57610114565b80635d3eea91116100e75780635d3eea91146101b5578063715018a6146101de578063817b1cd2146101f55780638ae39cac146102205780638da5cb5b1461024b57610114565b8063137ee36e146101195780631959a00214610144578063464d9409146101825780634e71d92d1461019e575b600080fd5b34801561012557600080fd5b5061012e61041c565b60405161013b9190611db1565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906117b2565b6104e9565b604051610179929190611e18565b60405180910390f35b61019c60048036038101906101979190611942565b61050d565b005b3480156101aa57600080fd5b506101b3610906565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611855565b610986565b005b3480156101ea57600080fd5b506101f3610a44565b005b34801561020157600080fd5b5061020a610acc565b6040516102179190611db1565b60405180910390f35b34801561022c57600080fd5b50610235610ad2565b6040516102429190611db1565b60405180910390f35b34801561025757600080fd5b50610260610ad8565b60405161026d9190611bbd565b60405180910390f35b34801561028257600080fd5b5061028b610b01565b005b34801561029957600080fd5b506102a2610b6d565b6040516102af9190611db1565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da9190611855565b610b73565b005b3480156102ed57600080fd5b506102f6610bd6565b6040516103039190611db1565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e91906118af565b610bdc565b6040516103409190611db1565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190611855565b610bff565b005b34801561037e57600080fd5b50610387610c8d565b6040516103949190611c99565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf91906117b2565b610cb3565b005b3480156103d257600080fd5b506103db610dab565b6040516103e89190611cb4565b60405180910390f35b3480156103fd57600080fd5b50610406610dd1565b6040516104139190611c99565b60405180910390f35b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806020015164e8d4a5100060045464e8d4a5100061049f60035443610bdc565b6104a99190611f84565b6104b39190611f53565b6001546104c09190611efd565b83600001516104cf9190611f84565b6104d99190611f53565b6104e39190611fde565b91505090565b60056020528060005260406000206000915090508060000154908060010154905082565b610515610b01565b60606000600267ffffffffffffffff81111561053457610533612193565b5b6040519080825280602002602001820160405280156105625781602001602082028036833780820191505090505b50905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160008151811061058e5761058d612164565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106105ff576105fe612164565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab56002346106849190611f53565b8884308a6040518663ffffffff1660e01b81526004016106a79493929190611dcc565b6000604051808303818588803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906106fe91906117df565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460018151811061077557610774612164565b5b60200260200101516040518363ffffffff1660e01b815260040161079a929190611c0f565b602060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611828565b506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d71960023461083a9190611f53565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660018151811061087157610870612164565b5b60200260200101518989308d6040518863ffffffff1660e01b815260040161089e96959493929190611c38565b6060604051808303818588803b1580156108b757600080fd5b505af11580156108cb573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108f091906118ef565b925050506108fd81610df7565b50505050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610951610b01565b610959610ef2565b64e8d4a5100060015482600001546109719190611f84565b61097b9190611f53565b816001018190555050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508181600001511015610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690611d31565b60405180910390fd5b610a37610b01565b610a4082610fc6565b5050565b610a4c61110e565b73ffffffffffffffffffffffffffffffffffffffff16610a6a610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790611d51565b60405180910390fd5b610aca6000611116565b565b60045481565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600354431015610b1057610b6b565b60006004541415610b275743600381905550610b6b565b60045464e8d4a51000610b3c60035443610bdc565b610b469190611f84565b610b509190611f53565b600154610b5d9190611efd565b600181905550436003819055505b565b60015481565b610b7b610b01565b610bca333083600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111da909392919063ffffffff16565b610bd381610df7565b50565b60035481565b60008282610bea9190611fde565b600254610bf79190611f84565b905092915050565b610c0761110e565b73ffffffffffffffffffffffffffffffffffffffff16610c25610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290611d51565b60405180910390fd5b610c83610b01565b8060028190555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cbb61110e565b73ffffffffffffffffffffffffffffffffffffffff16610cd9610ad8565b73ffffffffffffffffffffffffffffffffffffffff1614610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690611d51565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611cf1565b60405180910390fd5b610da881611116565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610e42610ef2565b81816000016000828254610e569190611efd565b925050819055508160046000828254610e6f9190611efd565b9250508190555064e8d4a510006001548260000154610e8e9190611f84565b610e989190611f53565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610ee69190611db1565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015464e8d4a510006001548460000154610f549190611f84565b610f5e9190611f53565b610f689190611fde565b9050610f743382611263565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610fba9190611db1565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611011610ef2565b818160000160008282546110259190611fde565b92505081905550816004600082825461103e9190611fde565b9250508190555064e8d4a51000600154826000015461105d9190611f84565b6110679190611f53565b81600101819055506110bc3383600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f79d3df6837cc49ff0e09fd3258e6e45594e0703445bb06825e9d75156eaee8f0836040516111029190611db1565b60405180910390a25050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61125d846323b872dd60e01b8585856040516024016111fb93929190611bd8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611453565b50505050565b6000600454600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112c39190611bbd565b60206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611882565b61131d9190611fde565b90508082111561137a576113748382600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b506113c9565b6113c78383600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113cd9092919063ffffffff16565b505b5050565b61144e8363a9059cbb60e01b84846040516024016113ec929190611c0f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611453565b505050565b60006114b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661151a9092919063ffffffff16565b905060008151111561151557808060200190518101906114d59190611828565b611514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150b90611d91565b60405180910390fd5b5b505050565b60606115298484600085611532565b90509392505050565b606082471015611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e90611d11565b60405180910390fd5b61158085611646565b6115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690611d71565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115e89190611ba6565b60006040518083038185875af1925050503d8060008114611625576040519150601f19603f3d011682016040523d82523d6000602084013e61162a565b606091505b509150915061163a828286611659565b92505050949350505050565b600080823b905060008111915050919050565b60608315611669578290506116b9565b60008351111561167c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b09190611ccf565b60405180910390fd5b9392505050565b60006116d36116ce84611e66565b611e41565b905080838252602082019050828560208602820111156116f6576116f56121c7565b5b60005b85811015611726578161170c888261179d565b8452602084019350602083019250506001810190506116f9565b5050509392505050565b60008135905061173f8161234f565b92915050565b600082601f83011261175a576117596121c2565b5b815161176a8482602086016116c0565b91505092915050565b60008151905061178281612366565b92915050565b6000813590506117978161237d565b92915050565b6000815190506117ac8161237d565b92915050565b6000602082840312156117c8576117c76121d1565b5b60006117d684828501611730565b91505092915050565b6000602082840312156117f5576117f46121d1565b5b600082015167ffffffffffffffff811115611813576118126121cc565b5b61181f84828501611745565b91505092915050565b60006020828403121561183e5761183d6121d1565b5b600061184c84828501611773565b91505092915050565b60006020828403121561186b5761186a6121d1565b5b600061187984828501611788565b91505092915050565b600060208284031215611898576118976121d1565b5b60006118a68482850161179d565b91505092915050565b600080604083850312156118c6576118c56121d1565b5b60006118d485828601611788565b92505060206118e585828601611788565b9150509250929050565b600080600060608486031215611908576119076121d1565b5b60006119168682870161179d565b93505060206119278682870161179d565b92505060406119388682870161179d565b9150509250925092565b6000806000806080858703121561195c5761195b6121d1565b5b600061196a87828801611788565b945050602061197b87828801611788565b935050604061198c87828801611788565b925050606061199d87828801611788565b91505092959194509250565b60006119b583836119c1565b60208301905092915050565b6119ca81612012565b82525050565b6119d981612012565b82525050565b60006119ea82611ea2565b6119f48185611ed0565b93506119ff83611e92565b8060005b83811015611a30578151611a1788826119a9565b9750611a2283611ec3565b925050600181019050611a03565b5085935050505092915050565b6000611a4882611ead565b611a528185611ee1565b9350611a628185602086016120a2565b80840191505092915050565b611a778161205a565b82525050565b611a868161207e565b82525050565b6000611a9782611eb8565b611aa18185611eec565b9350611ab18185602086016120a2565b611aba816121d6565b840191505092915050565b6000611ad2602683611eec565b9150611add826121e7565b604082019050919050565b6000611af5602683611eec565b9150611b0082612236565b604082019050919050565b6000611b18601383611eec565b9150611b2382612285565b602082019050919050565b6000611b3b602083611eec565b9150611b46826122ae565b602082019050919050565b6000611b5e601d83611eec565b9150611b69826122d7565b602082019050919050565b6000611b81602a83611eec565b9150611b8c82612300565b604082019050919050565b611ba081612050565b82525050565b6000611bb28284611a3d565b915081905092915050565b6000602082019050611bd260008301846119d0565b92915050565b6000606082019050611bed60008301866119d0565b611bfa60208301856119d0565b611c076040830184611b97565b949350505050565b6000604082019050611c2460008301856119d0565b611c316020830184611b97565b9392505050565b600060c082019050611c4d60008301896119d0565b611c5a6020830188611b97565b611c676040830187611b97565b611c746060830186611b97565b611c8160808301856119d0565b611c8e60a0830184611b97565b979650505050505050565b6000602082019050611cae6000830184611a6e565b92915050565b6000602082019050611cc96000830184611a7d565b92915050565b60006020820190508181036000830152611ce98184611a8c565b905092915050565b60006020820190508181036000830152611d0a81611ac5565b9050919050565b60006020820190508181036000830152611d2a81611ae8565b9050919050565b60006020820190508181036000830152611d4a81611b0b565b9050919050565b60006020820190508181036000830152611d6a81611b2e565b9050919050565b60006020820190508181036000830152611d8a81611b51565b9050919050565b60006020820190508181036000830152611daa81611b74565b9050919050565b6000602082019050611dc66000830184611b97565b92915050565b6000608082019050611de16000830187611b97565b8181036020830152611df381866119df565b9050611e0260408301856119d0565b611e0f6060830184611b97565b95945050505050565b6000604082019050611e2d6000830185611b97565b611e3a6020830184611b97565b9392505050565b6000611e4b611e5c565b9050611e5782826120d5565b919050565b6000604051905090565b600067ffffffffffffffff821115611e8157611e80612193565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611f0882612050565b9150611f1383612050565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f4857611f47612106565b5b828201905092915050565b6000611f5e82612050565b9150611f6983612050565b925082611f7957611f78612135565b5b828204905092915050565b6000611f8f82612050565b9150611f9a83612050565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fd357611fd2612106565b5b828202905092915050565b6000611fe982612050565b9150611ff483612050565b92508282101561200757612006612106565b5b828203905092915050565b600061201d82612030565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120658261206c565b9050919050565b600061207782612030565b9050919050565b600061208982612090565b9050919050565b600061209b82612030565b9050919050565b60005b838110156120c05780820151818401526020810190506120a5565b838111156120cf576000848401525b50505050565b6120de826121d6565b810181811067ffffffffffffffff821117156120fd576120fc612193565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a3a62616420616374696f6e00000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61235881612012565b811461236357600080fd5b50565b61236f81612024565b811461237a57600080fd5b50565b61238681612050565b811461239157600080fd5b5056fea2646970667358221220ca91d6e40a75de8d64b2c89cf1f4352005ca9b824d28bcc85020fd7b66ffb4c764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1200,
        "contract": "contracts/Staking.sol:Staking",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1202,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1204,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1206,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1211,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UserInfo)1198_storage)"
      },
      {
        "astId": 1214,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)181"
      },
      {
        "astId": 1217,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakedToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)181"
      },
      {
        "astId": 1220,
        "contract": "contracts/Staking.sol:Staking",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUniswapV2Router02)1181"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)181": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)1181": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1198_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1198_storage"
      },
      "t_struct(UserInfo)1198_storage": {
        "encoding": "inplace",
        "label": "struct Staking.UserInfo",
        "members": [
          {
            "astId": 1195,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1197,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}